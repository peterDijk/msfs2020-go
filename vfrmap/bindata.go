// Code generated by go-bindata. DO NOT EDIT.
// sources:
// html/index.html (13.225kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3b\x5b\x73\xdb\xb6\x9a\xef\xfd\x15\x28\xce\x74\x22\x4d\x29\x88\x17\x51\xb7\x48\x3a\xbd\x24\x69\xbb\xeb\x34\x99\x24\x6d\x67\xb7\xe9\x68\x20\x12\xa6\x78\x0c\x02\x1c\x02\xb2\xec\x78\xfc\xdf\x77\x00\x92\x12\x40\x52\xb2\x92\xf3\x70\xba\x7d\x68\x44\xe0\xbb\xe3\xbb\xe1\x23\xbd\xf8\xfa\xc5\x9b\x1f\x3f\xfc\xcf\xdb\x97\x60\x2b\x33\xba\xfa\x6a\x51\xfe\x03\xc0\x62\x4b\x70\xac\x7e\x00\xb0\x90\xa9\xa4\x64\x95\x89\x6b\xe1\xbb\xbe\x3b\x48\xf8\xf0\xf6\xba\xc8\x70\xbe\x18\x96\x3b\x25\x14\x4d\xd9\x0d\x28\x08\x5d\xc2\x34\xe2\x0c\x02\x79\x9f\x93\x25\x4c\x33\x9c\x90\x61\xce\x12\x08\xb6\x05\xb9\x5e\xc2\x18\x4b\x3c\x3f\xac\x3e\xdf\x60\x41\xc6\x23\x27\xfd\xfd\x87\x37\xef\xf6\xee\x7f\xff\x94\xf0\x25\x6c\x11\x14\xf2\x9e\x12\xb1\x25\x44\xd6\x54\x28\xc1\xd7\x94\xc8\x7f\x89\x61\xf5\x0b\x45\x42\x40\x30\xac\x50\x33\x22\x31\x60\x38\x23\x4b\x88\xf3\x9c\x92\x41\xc6\x37\x29\x25\x83\x3d\xd9\x0c\x70\x9e\x0f\x22\x9c\xe3\x0d\x25\x10\x44\x9c\x49\xc2\xe4\x12\xde\x13\x01\x2f\x44\x16\x12\xcb\x9d\x18\x6c\x70\x31\xd0\x82\x19\x54\x36\x14\x47\x37\x97\xd2\xd1\xc6\x33\x90\x7f\x7f\xf5\xee\x35\xce\x6b\x6c\x11\x15\x69\x2e\x81\x28\xa2\x2e\x6d\xff\x25\xe0\x6a\x31\x2c\x61\x2e\x42\x28\xb8\xc4\x92\xc4\xaf\x71\x71\x43\x8a\x4e\x74\xa5\x4a\x75\x68\x92\xdc\xc9\xa1\x32\x68\xb9\x07\xb4\x73\x38\x60\xc3\xe3\x7b\xf0\x50\x2d\x01\xb0\x25\x69\xb2\x95\x73\xe0\xb9\xee\x37\xcf\x0f\xab\x19\x2e\x92\x94\xcd\x81\x7b\x5c\xca\x71\x1c\xa7\x2c\x31\xd6\x1e\xbf\xaa\x7e\x34\x48\xc6\xa9\xc8\x29\xbe\x9f\x83\x6b\x4a\xee\x8e\x04\xd4\xd3\x20\x4e\x0b\x12\xc9\x94\xb3\x39\x88\x38\xdd\x65\xac\x45\xec\x1f\x19\xce\x0d\x62\x1b\x1c\xdd\x24\x05\xdf\xb1\x78\x10\x71\xca\x8b\x39\x48\x0a\x7c\xdf\xa0\x9a\x14\x7c\x3f\x07\x5e\x9b\xd6\x36\x8d\xc9\x60\xbb\x8b\x0d\x82\x39\x17\x69\x29\x00\xde\x08\x4e\x77\x92\x1c\x89\x49\x9e\x5b\x3a\x53\x72\x2d\xad\x85\x4f\x83\x94\xc5\xe4\x6e\x0e\xbc\x51\x97\x65\x50\x48\xb2\xe3\x7a\x25\xaf\x76\x27\x43\x60\xce\xe4\x40\xa4\x9f\xc8\x1c\x78\x26\xb4\x5e\xdf\x57\xa7\xb1\xe1\x34\x7e\x8a\x50\xb4\x2b\x84\x5a\xce\x79\xca\x24\x29\x8e\xca\x37\x74\x9f\x6f\xf9\x2d\x29\x0c\x0b\x54\xe4\xf6\xdb\xf4\xa8\xbb\x61\x32\xdb\x5a\xb5\x6e\x96\xac\xca\xb5\x06\x98\xa6\x89\x3a\x46\x62\x72\xef\xa6\x6e\x6b\x6d\x5b\xa9\x7d\xc0\x96\x9e\xb6\x60\x22\xc7\x0c\x5d\xa7\x84\x76\xc8\x38\x28\x4a\xdb\x59\xa7\xf0\xd8\xc2\xbe\xc5\x74\x47\x0c\x6c\x43\x32\x1f\xb9\x4f\x62\xae\x45\x86\x29\xed\xc6\xf7\x4c\xfc\xa3\x5c\x95\x17\x21\xaf\x83\xb8\x24\x94\xe4\xbc\x90\x83\x9c\xe7\xbb\x1c\xe4\x1d\xa6\x77\x91\x6f\x52\xed\x08\xcd\xd3\xc7\x71\x9a\x0f\xc5\x1b\x42\xcf\x19\xd1\x6f\x4a\xbb\x18\xea\xec\xb2\xfa\xca\xcc\x54\x75\x6e\x81\x3b\x41\x80\x90\x45\x1a\x49\xf8\xbc\x3e\x32\x4a\x24\xd8\xee\x0e\x8e\xac\x1e\x33\x9c\xdb\x8f\x2a\x93\xb5\x57\x3e\x54\xe2\xb6\x77\x7e\x89\x38\x33\x57\xb5\x3e\xe6\xc2\x5e\x58\xdb\x14\x33\xb2\x6e\x01\xd5\xe6\x68\xef\x5c\x73\x4a\xf9\x7e\xad\xf1\xc0\x12\x5c\x63\x2a\x88\xb9\x4f\xb1\x90\xeb\x42\x23\x83\x25\x78\x78\x34\xf7\xc4\x6d\xf2\x56\xe1\x29\x19\xdf\xcb\x22\x65\x09\x58\x82\x67\x8b\x7f\xde\x65\x14\xdc\x92\x42\xa4\x9c\x2d\xa1\x87\x5c\x08\x08\x8b\xb8\x32\xf7\x12\xfe\xf6\xe1\xd5\x60\x0a\x81\x90\x98\xc5\x98\x72\x46\x96\x90\x71\xf8\xcf\xd5\x42\xdc\x26\xe0\x2e\xa3\x4c\x2c\xe1\x56\xca\x7c\x3e\x1c\xee\xf7\x7b\xb4\x0f\x10\x2f\x92\xa1\xef\xba\xee\x50\xdc\xaa\x7a\xac\x33\xc6\x12\xfa\xa3\x19\x9a\x8e\x20\xd8\xa7\xb1\xdc\xaa\xc7\x29\xf2\x43\x68\xb3\x5d\xe9\x6a\xa6\x6a\x37\x48\xe3\x25\xac\x1f\x66\x70\xb8\x5a\xe4\x58\x6e\xf5\xaa\xfa\x11\x4e\xfc\x11\x04\xf1\x12\xbe\x06\xfe\x68\x82\x42\x6f\xe4\x8e\x1c\x2f\xf4\xd1\xc8\xf5\xc7\x63\xe0\x05\x33\xe4\x86\x93\xa9\xe7\x4c\x3c\x34\x75\xdd\xd9\x68\x0c\x22\xe0\xa2\xa9\xeb\x8f\xa7\xce\xc0\xf3\xd1\x28\xf4\xa6\xa3\x10\x78\x28\xf0\x47\x93\xc0\x19\x8c\x5c\xe4\x87\x63\x85\xeb\xa2\x69\x38\x52\x50\xa3\x10\x8d\xbc\x49\x38\x9b\x81\x41\x80\x66\x23\x37\x18\x39\x83\x51\x80\xfc\xf1\x78\x34\xf6\xc1\x20\xf0\x90\x1f\xb8\xde\xd4\x19\xf8\x23\x34\x0e\x5c\xcf\x9b\x05\x7a\x75\x34\x0d\x82\xd0\x19\x84\x28\xf0\xdd\x60\x3c\x01\x03\x17\xb9\xe3\x59\xe0\x84\xc8\x9f\x7a\xc1\xd8\x03\x03\x0f\xb9\x5e\xe8\xfa\x4e\xe0\xa3\x70\x36\x0d\xa6\x53\xb5\xe4\xb9\xa3\x89\xe7\x84\x2e\x9a\x06\xe3\xb1\xef\x83\x2b\xe5\xe2\xd3\x91\x3f\xf1\x26\x8e\x17\x8e\x50\x30\x09\xc7\x3e\x70\x1d\x6f\xea\x22\x6f\x16\x4e\x42\x40\x81\xe7\xb9\x28\x74\xdd\x70\xea\x0c\x42\x17\x8d\xa6\x7e\x30\x03\x01\x9a\xcd\x82\xc0\x77\xa6\x2e\xf2\x67\xde\x58\xc9\xe4\x23\x77\xe4\x87\xe3\x89\xe3\xfb\x68\x16\x4c\xbd\xb1\x92\xc9\x77\x83\xe9\x28\x74\xbc\x31\x9a\xce\xc6\xb3\x00\x8c\x7c\xa4\x78\x4d\x7c\x67\xe0\x79\x28\x9c\x85\xda\x16\xae\x3b\x75\x5c\xe4\x05\xb3\x50\x01\x4c\xbc\xc0\xf3\x1c\xcf\x45\x33\x6f\x3a\x99\x29\x2a\xa1\x3b\xf3\x67\xce\x40\x51\x99\xfa\x5e\xc9\x6c\x14\x06\x93\x91\x33\xf0\x7d\x14\xcc\x66\x6e\x00\x7c\x34\xf6\xbc\xc0\x77\x06\x53\x17\x05\xa1\xef\x86\xc0\xf3\x3c\x14\x84\xb3\x59\xe8\x8c\xa6\x28\x74\xc7\x9e\xa7\x68\x4d\x82\xd1\x4c\xe1\x85\x68\x32\xf1\x67\x21\xf8\x04\xc1\x75\x4a\xe9\xa0\xd8\x51\xb2\x84\xe4\x96\x30\x1e\xc7\xe5\xda\x12\xae\xd7\x3f\xbe\xb9\x7a\xf3\x6e\xbd\x56\xbe\xa1\x3c\x6d\xf5\xec\xab\x66\x58\x29\x37\xff\x41\xe5\x6a\xb0\x04\x57\x48\xf5\x8b\xbd\x63\x3e\x51\x8f\xbf\x15\x74\x5e\xba\x3a\xf9\xed\xdd\x2f\x3d\xb3\x6b\x14\xb7\xc9\xb7\x77\x19\x75\x20\xf8\xb6\x23\x6c\xfa\xa8\x20\x39\xc5\x11\xe9\xc1\x7f\x40\x07\x7e\xe3\x07\xd0\x58\x3a\xca\xe6\x80\xaa\x59\xeb\x3b\x16\xe3\xf7\x3a\x1d\xff\x39\x1e\x39\x60\x3c\xfa\xab\xde\x7b\xec\xb7\x32\x83\x62\xf9\x87\xaa\x54\xff\x49\x15\x74\xa9\xfc\xb7\x54\xf8\xa9\x20\x84\xfd\x27\x55\x48\x94\x00\x97\xab\x50\xfd\x8c\x79\xb4\xcb\x08\x93\x88\xb3\x1b\x72\xbf\xcb\x55\xbe\xdd\x31\xdd\x1e\xf6\x94\x3f\xca\xbe\x51\xa0\x40\x7a\x0d\xca\x55\x74\x43\xee\xc1\x72\xb9\x04\xf0\xa5\x88\x70\x4e\x60\xdf\x80\x52\x4d\x5c\x92\x50\xb2\x2e\x13\x79\xaf\x7f\x2c\x93\x87\x6a\x78\xe8\x29\x6a\x6e\x80\xe7\x84\xad\x53\xb6\x4e\x38\x57\xb8\x19\xce\x45\xcf\x64\x7e\x8b\x0b\xb0\x2b\x28\x58\x02\x9d\x8c\x45\x95\x8d\x4b\x70\x14\xf1\x6c\xa8\x50\x86\xdf\x29\x43\x1a\x15\x02\x51\x2c\x53\xb9\x8b\x09\xf8\x16\x40\xa7\xb5\xc9\x59\x62\xef\x66\x38\x47\x09\x91\xff\xcb\x79\xd6\xeb\xab\xd5\x4f\xf0\x20\xc2\x3e\x65\x31\xdf\x23\x25\x69\x6f\x57\x50\xe7\xd9\x7a\x43\x31\xbb\x79\xd6\x6f\x75\x4a\x07\xad\x76\x79\x8c\x25\x79\x8d\xf3\x5e\x26\x12\xcb\x96\x5a\xa1\x9c\x0b\xed\x33\x14\xcb\x2b\x96\x28\x98\x83\xbc\x0e\xd0\x4f\xb5\x80\xa6\x11\xab\x3a\x8c\x04\x91\x57\x25\x62\xce\xc5\x09\x80\x77\xea\xbe\x92\x72\xf6\x3d\x4b\x28\xd1\x0c\xd4\x85\x54\xb9\xd6\xc1\x07\xd4\x7f\x46\x91\x46\x39\x17\x28\x65\x4c\xb5\x00\x77\xaa\xc2\xfe\xba\xcb\x36\xa4\x50\x3c\x94\x70\x7d\x24\xf9\xab\xf4\x8e\xc4\xbd\x71\xff\x60\x35\x13\x44\x79\xed\x11\xc4\x94\x6a\x38\x34\xd9\x24\xca\xd4\x9a\xcf\xcf\x1f\x5e\x5f\xa9\x73\x5d\xe0\xf2\x56\xfa\xf1\xe9\x13\xae\x84\x39\x08\x50\x71\x3e\x73\x8c\x1f\xe1\xaa\xa4\xa4\xf6\xc4\x62\x88\x57\xd0\xb2\x80\xf2\x6d\xb3\xf3\xb0\x0f\x0b\x68\x8a\x39\x66\x1f\x78\xcb\xd8\x8f\x8d\x4e\xaf\xdb\x07\x7e\xfe\xed\x45\xd3\x07\xb6\xbb\x18\x61\x5a\x1e\xb7\x65\x71\x75\x4c\xf5\xc6\x73\x0b\xbc\x3a\xbc\x16\x74\xb5\x6e\x03\xe3\xb4\x10\x39\x21\x71\x9b\x76\xb5\x61\x83\xdf\x92\x42\xa6\x11\xa6\xeb\x6e\x24\x7b\xbb\x9b\xd3\x5a\x16\x3b\x5b\x15\xd8\xd3\xc7\x61\x30\xd5\x30\xea\x48\xfa\xd0\x26\x72\x4d\x71\x2e\x5a\x6c\xf5\xaa\x0d\x28\x8b\x34\x6b\xc1\xa9\x45\x1b\xac\xd8\xc5\x31\x29\xd6\x9d\xd0\xc6\x9e\x8d\x14\x67\x64\xed\xb5\xc0\xf5\x6a\x33\xc8\xf7\x2a\x76\x19\xd9\x83\x3f\xc8\xe6\x3d\x8f\x6e\x88\xec\xc1\xbd\xf2\x5a\xa5\x71\x95\x2b\x28\x8f\x74\xf8\xa1\x2d\x17\x92\xe1\x4c\x2b\x3e\xef\x02\xd0\xed\xec\xb7\x00\x0e\xf7\x02\x1e\xdc\x6b\x2f\x10\x67\x2a\xdf\x98\x79\xd9\x74\xa1\xe1\x30\xe2\x4c\x70\x4a\x10\xe5\x89\x62\xaf\xf3\xe8\x91\xc0\xa3\x45\x29\xa2\x5c\x90\xcb\x49\x69\xf0\x53\xb4\x32\x22\x04\x4e\x2c\x6a\xa4\x99\xaf\x33\xa1\xda\xef\xff\x7a\xff\xe6\x57\x94\xe3\x42\x90\x1e\x41\xaa\xf4\x19\xd1\xd3\x66\xaa\x00\xa0\x4e\x7e\x06\x98\xdd\xf2\x67\x22\x31\x42\xd7\x0e\x2f\x63\x43\x45\x74\x86\x73\xf0\xf5\x72\x09\x76\x2c\x26\xd7\x29\x23\xb1\x1d\xd6\x76\x7a\x3e\xf2\x7b\x3c\xaa\xdc\x8c\xe6\x94\xa5\x52\x21\x34\x75\x6d\xa4\x72\xd5\xa9\x4f\xfc\x89\x33\xf0\xd0\x24\xf4\x03\x53\x2e\x05\xcd\x45\x56\x39\xcf\x15\xfa\x90\x52\x72\x85\xef\x49\xd1\xab\xaf\x19\x0f\xe2\x11\xc9\x94\x12\x5d\x6a\x84\x2c\x08\x91\x2a\xfd\xa8\x6b\xc7\xc3\xa7\xc7\xe1\xc3\xdd\xe3\xf0\xe1\xfe\x11\xe5\x2c\x81\x8e\xa5\x4f\x86\xef\x54\xca\x9b\x03\x6f\xea\x98\xcb\x29\x2b\x97\x7d\x73\xf5\x9a\x17\x19\x96\x73\x60\xcc\x16\xcd\x6d\xb1\xdb\xc4\x3c\xc3\x29\x13\x73\xf0\x27\xc4\xba\xd3\x53\xff\x8b\xe0\x5f\x47\x3b\x19\x36\xd3\x6a\xe5\x84\xe1\x34\x5f\x47\x38\xda\x92\x78\xbd\xc1\x82\xa8\x13\xb8\x40\x53\x95\x94\x51\x85\x8e\x18\x91\xc3\x84\xf0\x3d\xd9\x68\x42\x43\x41\x8a\xdb\x34\x22\x43\x99\x89\xa1\x87\x5c\xe4\x0e\x6b\x46\x15\x87\xef\x5e\xbe\x7d\xff\xd3\x37\xc1\xf7\x33\xd7\x9d\x79\xc1\x77\x39\xbb\xdc\x50\xa3\x4e\x43\x59\xab\x32\x13\x73\xa0\xb2\x96\x63\x15\xb3\x98\x48\x12\xc9\x77\x44\xa6\x0c\xb7\xf7\x4d\xf3\x41\xcf\x87\x9f\x61\x79\x59\x60\x26\x72\x5c\x10\x26\x4b\xba\x27\xed\x2d\x24\xce\x08\x5b\xeb\x0e\x7c\xbd\xaf\xba\xe8\x27\x6d\x5d\x62\xe9\x8a\x2a\x39\x23\xc5\xdf\xdc\xa9\x2a\x25\x25\x29\x0a\x9c\xb2\xcf\x55\xb0\xc4\xfa\xff\xa1\xe2\x1e\x4b\x52\x7c\xa6\x82\x1a\x47\x8f\xed\xfe\xe6\x3a\x46\xb8\x90\x7c\x1d\xe3\xe2\xe6\x94\x86\xaa\x76\x6a\xa8\x78\x33\xa8\x02\x5b\x0c\x94\xce\x09\xe5\x1b\x4c\x91\x10\x14\x5d\x63\x21\xe9\xbd\xce\x10\x8a\xd4\x1a\x53\xfa\x37\xd6\xdb\x18\x19\x1e\xb3\xa0\xaa\x1e\x30\xc3\x79\x43\x4e\xaa\x0c\xa1\xe8\xea\xe2\xf0\x97\xc9\xb6\x9c\x28\xce\x55\x8d\x31\x97\x3f\x95\x6a\xb9\xe6\x1a\x96\xb2\x48\x37\x3b\x55\xaa\x7e\xe4\x4c\x16\x9c\xce\xcb\x09\x9a\x25\x9f\x75\x30\x25\x8a\x2e\x5e\x51\x89\x82\x0c\x2a\xbd\x87\xe3\xb8\x1e\x6e\xb8\x94\x3c\xa3\xe4\x5a\x42\x53\xcd\x12\x1c\xe1\x38\xfe\xde\x40\x3c\xd1\xcf\xb7\x6b\x5a\xc4\xf3\x7b\x3d\xf4\xfc\x08\x81\xc4\x45\x42\xe4\xf2\x23\x2c\xef\x56\x1f\x21\xd0\x23\xcf\xe5\x47\xf8\x11\xae\xde\xe4\x44\x5d\x8c\x09\x51\x15\x58\xb7\xf0\xff\x8e\x10\x55\xa5\x79\x8a\xa9\x02\xfd\xfe\x97\xb7\x5f\xc4\x6e\x3e\xd4\x77\x16\x23\x5e\x9f\xe2\xf6\x5e\x43\x7e\xb1\x6e\x3a\x7c\x74\x5e\x78\x8a\xd1\x8f\x0a\xb2\xc9\xa7\x83\xe1\x07\xae\x9a\xa8\xa6\xcf\xa8\xf0\x7c\x8d\x73\xd5\xf2\xd8\xd7\x24\x68\x9d\x11\x9c\x2b\x67\x76\x6c\x88\x52\x45\xf0\xa1\xcc\xcc\x70\xde\x48\xf0\x27\xa0\x55\xa1\x3a\xc2\x1a\x15\xaf\x1b\xfe\x0f\x95\x16\x8f\xf0\x3a\x4b\x36\x20\xb5\x05\xc0\x0b\x95\x90\x7a\xbf\x2a\xf7\x03\xaf\x79\x4c\xfa\x70\x6e\xa4\xaa\x23\x4a\xdd\xfd\xda\xfd\xce\x2d\x29\x28\xbe\xef\xb6\xc4\xaf\xf8\x36\x4d\x74\x73\x8f\x29\x78\xa1\xda\xda\xf9\x89\x06\xa9\xcd\x05\x00\x23\x1a\xcb\xcc\xd0\xab\x6d\xee\x98\x6c\xfb\xdd\x67\x54\x0e\x00\x74\x4c\x97\x3f\xd5\xad\xd5\xce\x37\x69\xa4\x42\xda\x1e\x23\x9a\x16\x2a\xcc\xc9\xc1\x1c\xb8\x5d\x7b\x6f\x8a\x54\xbf\x09\x81\x65\x86\x32\x72\xa5\x99\x1e\xaa\x69\x84\x29\x68\x63\x6b\x93\xb2\xf8\x2d\xcf\x77\x79\xef\x0a\xe9\xe9\x40\xef\x01\xef\x24\x7f\x8b\x59\x95\xbd\x1e\xfb\x8d\x69\x87\x7a\xfc\xb1\x7c\xe3\xdb\x33\xa7\x0a\x2a\x39\xf7\x9b\xde\x5a\x72\x79\x6b\x77\xe8\xae\xe3\xb6\x04\xa9\x5f\x7a\x98\x86\x3b\x20\x3b\xe0\xa1\xad\x55\x8d\x71\x46\xbb\x03\xc8\x85\x5a\xd6\x6a\xd9\x6f\x48\x0e\x9a\xd5\xc4\x05\x91\xeb\x03\x48\x53\x56\x65\x01\xb3\xf8\x20\xce\x7a\xcf\xe2\x02\x27\x42\xe2\x42\x3e\x73\x4e\x5c\xda\x40\xf3\xe5\x8b\xd5\x7d\x9e\x19\xec\x3d\xda\xce\x57\xf2\x8b\x68\x1a\xdd\x9c\xe1\xd5\xa5\x01\x51\xc7\x43\x59\xf2\x14\x6d\x15\x0c\x3a\x2e\xa2\x2d\x66\x09\x39\xc3\x45\x0f\x2d\x91\xbe\x7b\x2f\x97\xa7\xa3\xbe\x3d\xef\xa9\x47\x68\x2a\x3a\x7a\xf6\xac\xda\x9e\xff\x00\x42\x05\x69\xf2\xb1\xf2\xd6\xa5\xc4\xf5\x14\xb9\x8b\xf8\x65\xe8\x3a\x86\x3b\x67\x53\x66\x40\xb6\xa7\x94\x5d\x07\x51\x1d\x83\xc1\xb9\xe1\xcd\xc7\x78\x6c\x9d\x58\xc3\x73\x93\x5c\x54\xef\x7c\x97\xa0\x84\x55\x87\x7c\x18\x12\x4e\xfb\xc6\x6c\xb6\xdc\x65\x89\xb1\xfb\xdc\xba\xd1\x9b\xe3\xdb\x7a\x46\x66\x9b\xb7\xc1\xfd\x30\x61\x3b\x8a\xd0\xa6\xd0\x71\xf5\x6f\x59\xe9\x40\x77\x4b\x0a\xd2\x18\x9d\x1c\x27\x00\x0d\x2b\x25\x07\x2b\x35\xda\x61\x63\x36\x22\xf4\xac\x3f\xbd\xbe\xef\x19\x5a\x34\x8a\x89\xbc\xcf\x09\x9c\x03\x58\x0b\x01\x1b\xc5\x8c\x62\x09\xe7\x40\x4f\x59\x5e\x51\x8e\x5b\xd9\xe3\x70\x06\x48\xe4\x34\x95\x3d\xe8\xc0\xfe\x9f\xee\x5f\xfd\x26\x19\x96\x7c\x3e\x19\xaf\x45\xa6\x36\xeb\x59\x5a\xf6\xc1\x28\x27\x70\x51\xe8\x74\x3a\x6f\xdf\xfc\xb8\xe1\x38\x2f\xb2\x87\x36\x7b\x81\x04\x61\xb1\xb5\xda\x71\x8a\x76\x0a\x33\xec\x7c\x7e\x02\x6c\x16\x99\x12\xca\x9e\x73\x96\x6b\x25\x98\x31\xd8\xec\x88\xdf\xa7\x28\xc5\x9c\x3d\xab\xdf\x82\xb7\xe9\x1d\x7e\x35\x32\xf5\xd7\xe6\xf3\x69\xf5\xb7\x69\x4c\xd6\xdb\x5d\x6c\x69\xae\x1d\x72\xbb\x8b\xc1\xf2\xf8\x42\x28\x21\xf2\x25\x25\xea\xe7\x0f\xf7\xbf\xc4\x3d\xb8\xdd\xc5\x66\xa7\xa8\x87\xa5\xba\x9d\x44\xd5\xc7\x46\x4a\x74\xc6\x2d\x61\x9f\xa4\x59\x7d\x1f\xf3\x99\x84\x4f\x68\x95\x75\x4c\xe5\xca\x7b\xd7\x49\x01\xd4\x2d\xcc\xaa\xd7\xf9\xa5\xac\x0f\x24\x71\x1c\xbf\xbc\x25\x4c\x5e\xa5\x42\x12\xa6\xae\xb2\x2f\xde\xbc\xae\x4a\xf8\x15\xc7\x31\x89\xa1\x73\xe6\x9d\x9a\xe1\x0c\x8d\x0e\x52\xd5\xfb\xf9\x69\xd1\x35\x62\xf9\x2d\x09\xb4\xc2\x2f\xe7\xe2\x32\xb4\x41\xce\x85\x8d\x9a\x64\x38\xbf\x10\x37\xd1\xa6\x73\x5a\x9d\xc3\x85\xe8\x25\xb0\x49\xe0\xf1\x54\xf9\xf8\x3c\xb3\xd8\x5f\xd9\xd8\x12\x8a\xdd\x26\x4b\xe5\xc5\xc8\x83\x12\xbe\x61\xa2\xfc\x9c\x75\x1b\x04\x92\xbc\x61\xe0\x3a\xe5\x5d\x4e\xe2\x90\x49\xbb\x4d\x55\x06\xd8\xc3\xe7\xb1\xa8\x41\xd6\x3a\xf1\xda\x12\x56\x2f\x92\xce\x60\x57\x10\x5d\xc8\xf5\x2b\x9e\x73\xbc\xeb\xb7\x40\x67\xd0\xf5\x1b\xa2\x4b\x68\x28\xb8\x2e\x42\xf6\xab\xaa\x33\x94\x6c\xc0\x2e\x52\xfa\xf5\xd3\x19\x0a\x7a\xbf\x0b\x51\x16\x69\x76\xee\x98\x8b\x34\xeb\x42\x33\x5e\x4c\x9d\xc1\x36\xa0\xba\x88\xe8\xd7\x55\x67\xd0\xf5\x7e\x1b\xf1\xd1\xe8\xb3\x4f\x76\xfa\x87\xf7\x1f\x87\x94\x58\xfd\x32\xbf\x83\x5d\x0c\xeb\xcf\x9e\x17\x1b\x1e\xdf\x57\x9f\xc6\xc6\xe9\xad\xfe\xbe\x49\x65\xfc\xfa\xab\xb5\x85\xc8\x31\x03\x11\xc5\x42\x2c\xa1\xfe\xac\x10\xae\xbe\x3f\xb8\x51\xb9\xab\x70\x1a\x7e\x53\x63\x94\x4f\x2b\x77\x31\x54\x90\xab\x0e\x78\xc3\x47\x2c\xa4\xf2\x2b\xc2\x23\x2a\xa8\xfe\x3d\x27\xd7\x21\xb4\x0c\x3e\x76\x2c\x9d\x92\xeb\x49\xda\x3f\xd7\x71\x77\x24\x6d\x07\xda\x17\x53\xfe\x1d\xbd\x6f\x1a\xb3\xd3\xed\xbf\x98\xc1\xab\x32\x44\x8e\xe4\xcd\x98\xf8\x62\xaa\x1f\x74\x04\x1c\x89\x1a\xbe\xfe\xc5\x34\xdf\xa1\x26\xd5\x76\x20\x7d\x31\xf1\x17\xaf\x5f\x02\xcf\xa4\x6d\x46\xd9\x05\x54\x17\xc3\x38\xbd\xad\x3f\x22\x3f\xf8\x40\xdd\x21\x01\xce\xf4\x75\xba\x5c\x2a\x3b\xb8\xe7\x70\xa5\x1e\x54\x11\xb0\x08\xd9\xd8\xaa\x50\x37\xb0\x75\xa7\x54\x63\xeb\x3f\x40\x28\xb1\xed\x30\x55\x88\xab\x4a\xaa\xe3\x4e\x39\x42\x84\xf5\x17\xe6\xaa\x3b\x7a\x7e\x8c\xe6\x1a\xd7\xec\x4e\x56\x87\xdc\xb1\xc8\x57\x8b\x6d\xd0\x04\xd0\x7d\xc8\x6a\x31\xdc\x06\xab\xc5\x30\xb7\xa1\x37\x3b\x29\x39\x6b\x61\x24\xb6\x52\x9d\xdf\x0e\x3d\x2f\x47\xb7\x20\x65\xc0\xfa\xf0\xa3\x24\x79\x31\xab\xaa\x53\x39\x32\x6b\x66\x46\x25\x7a\x9b\xa6\x69\x37\xc3\x2e\x8d\xf6\xc4\x96\xa0\xfc\x20\xf8\x9a\x17\x4d\x38\xdd\x48\xac\x7e\x7a\xfb\x7e\xbe\x18\x6a\xa0\xd5\x22\x65\xf9\x4e\x1a\x7f\x66\x00\x3b\xc8\x97\x68\x2d\x45\x4f\xb3\xc1\x54\x1a\x59\xee\xf3\x78\x1d\x1a\x95\x93\x96\x2d\x09\x94\x0f\x9d\x24\xaa\x7e\xcb\x30\xb5\x7d\xe3\x7e\x0e\x57\xf5\xca\x53\x26\x3f\x04\xd3\x62\x58\x16\xa0\xc5\xb0\xfc\x8b\x9c\xff\x0b\x00\x00\xff\xff\x4c\x15\xe2\x0c\xa9\x33\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 13225, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x75, 0xaf, 0x5e, 0xfd, 0xe9, 0x91, 0x2e, 0x9d, 0x86, 0x37, 0x5b, 0x68, 0x17, 0x47, 0x6a, 0x20, 0xf1, 0x47, 0x25, 0xce, 0x45, 0x3e, 0xa4, 0xba, 0x38, 0x46, 0x68, 0x6b, 0x10, 0xe1, 0x3e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
